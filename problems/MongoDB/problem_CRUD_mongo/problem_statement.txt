
Objectives

Given an 'expense.repository.js' that will serve as the centralized location for all MongoDB operations related to expenses.

i) Implement the below methods within the repository:

    addExpense: Insert a new expense into the database.
    getAllExpenses: Retrieve all expenses from the database.
    getOne: Fetch a single expense by its ID.
    filterExpenses: Filter expenses based on criteria such as minimum amount, maximum amount, and recurring status.
    addTagToExpense: Add a tag to an existing expense.


ii) Refactor the controller to seamlessly integrate these new repository methods for various operations, ensuring a cohesive and efficient workflow.

Notes:

    Initialize the repository in your controller's constructor for efficient usage.
    When defining routes, ensure to bind the correct context (this) to the controller methods by using arrow functions.


Expected Output:

The application should function as before but with a cleaner architecture:

    Successfully adding a new expense via a POST request should seamlessly store the data using the 'addExpense' method from the repository.
    Using the appropriate ID parameter in a GET request should fetch a specific expense using the 'getOne' method.
    Filtering expenses through a GET request with specific query parameters should effectively utilize the 'filterExpenses' method. The necessary query parameters for filtration include: minAmount, maxAmount, and isRecurring. Example: http://localhost:3000/api/expenses/filter?minAmount=10&maxAmount=20&isRecurring=false
    POSTing a new tag to an expense should seamlessly update the expense with the new tag using 'addTagToExpense'.

    For a clearer grasp, please refer to the provided video: 
